from sp.physical_system.coverage.min_distance import Coverage, MinDistanceCoverage
from sp.physical_system.routing.shortest_path import Routing, ShortestPathRouting
from sp.physical_system.estimator import LinkDelayEstimator, DefaultLinkDelayEstimator
from sp.physical_system.estimator import GeneratedLoadEstimator, DefaultGeneratedLoadEstimator
from sp.core.model import EnvironmentInput


class EnvironmentController:
    """Environment Controller

    Attributes:
        routing (Routing): network routing algorithm.
            It uses :py:class:`sp.physical_system.routing.shortest_path.ShortestPathRouting` by default
        coverage (Coverage): it is responsible to attach users to the (edge/base stations) nodes along the time.
            It uses :py:class:`sp.physical_system.coverage.min_distance.MinDistanceCoverage` by default
        link_delay_estimator (LinkDelayEstimator): estimator of network transmission delay of requests' packet.
            It uses :py:class:`sp.physical_system.estimator.link_delay.DefaultLinkDelayEstimator` by default
        gen_load_estimator (GeneratedLoadEstimator): estimator of amount of load generated by uses along the time.
            It uses :py:class:`sp.physical_system.estimator.generated_load.DefaultGeneratedLoadEstimator` by default
    """

    def __init__(self):
        """Initialization
        """

        self.routing = ShortestPathRouting()
        self.coverage = MinDistanceCoverage()
        self.link_delay_estimator = DefaultLinkDelayEstimator()
        self.gen_load_estimator = DefaultGeneratedLoadEstimator()

    def init_params(self):
        """Initialize parameters to a simulation
        """
        if self.routing is None:
            self.routing.link_delay_estimator = self.link_delay_estimator
            self.routing.static_routing = True

    def clear_params(self):
        """Clear parameters
        """
        pass

    def update(self, system):
        """Update controller at a simulation time with a system's state

        Args:
            system (sp.core.model.system.System): system's state
        Returns:
            EnvironmentInput: environment input of the specified time
        """

        env = EnvironmentInput()

        time_tol = system.sampling_time
        env.attached_users = self.coverage.update(system, env, time_tolerance=time_tol)
        env.generated_load = self.gen_load_estimator.calc_all_loads(system, env, time_tolerance=time_tol)

        self.routing.update(system, env)
        env.net_delay = self.routing.get_all_paths_length()
        env.net_path = self.routing.get_all_paths()

        return env
