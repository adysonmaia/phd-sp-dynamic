from sp.core.estimator import Estimator
from abc import abstractmethod


class GeneratedLoadEstimator(Estimator):
    """Generated Load Estimator Abstract Class
    """

    def calc_app_loads(self, app_id, system, environment_input, **kwargs):
        """Estimate users generated load of an application to all nodes

        Args:
            app_id (int): application's id
            system (sp.core.model.system.System): system
            environment_input (sp.core.model.environment_input.EnvironmentInput): environment input
            **kwargs: extra parameters

        Returns:
            dict: load for each node
        """
        app = system.get_app(app_id)
        loads = {}
        for node in system.nodes:
            loads[node.id] = self.calc(app.id, node.id, system, environment_input, **kwargs)
        return loads

    def calc_node_loads(self, node_id, system, environment_input, **kwargs):
        """Estimate load of all applications by users attached to a node

        Args:
            node_id (int): node's id
            system (sp.core.model.system.System): system
            environment_input (sp.core.model.environment_input.EnvironmentInput): environment input
            **kwargs: extra parameters

        Returns:
            dict: load for each application
        """
        node = system.get_node(node_id)
        loads = {}
        for app in system.apps:
            loads[app.id] = self.calc(app.id, node.id, system, environment_input, **kwargs)
        return loads

    def calc_all_loads(self, system, environment_input, **kwargs):
        """Estimate load of all applications by users attached to any node.
        The result is indexed by the ids of each application and node.
        E.g.:

        .. code-block:: python

            all_loads = estimator.calc_all_loads(system, environment_input)
            app_id = 0
            node_id = 1

            load = all_loads[app_id][node_id]

        Args:
            system (sp.core.model.system.System): system
            environment_input (sp.core.model.environment_input.EnvironmentInput): environment input
            **kwargs: extra parameters

        Returns:
            dict: all loads
        """
        loads = {}
        for app in system.apps:
            loads[app.id] = self.calc_app_loads(app.id, system, environment_input, **kwargs)
        return loads

    @abstractmethod
    def calc(self, app_id, node_id, system, environment_input, **kwargs):
        """Estimate load of an application generated by users attached to a node

        Args:
            app_id (int): application's id
            node_id (int): node's id
            system (sp.core.model.system.System): system
            environment_input (sp.core.model.environment_input.EnvironmentInput): environment input
            **kwargs: extra parameters

        Returns:
            float: load
        """
        pass


class DefaultGeneratedLoadEstimator(GeneratedLoadEstimator):
    """Default Generated Load Estimator
    """

    def calc(self, app_id, node_id, system, environment_input, time_tolerance=None, **kwargs):
        """Estimate load of an application generated by users attached to a node

        Args:
            app_id (int): application's id
            node_id (int): node's id
            system (sp.core.model.system.System): system
            environment_input (sp.core.model.environment_input.EnvironmentInput): environment input
            time_tolerance (float): time tolerance (in seconds)
            **kwargs: extra parameters

        Returns:
            float: load
        """
        nb_users = environment_input.get_nb_users(app_id, node_id)
        app = system.get_app(app_id)
        users_load = float(app.request_rate * nb_users)

        load_estimator = system.get_load_estimator(app_id, node_id)
        extra_load = 0.0
        if load_estimator is not None:
            extra_load = load_estimator(system.time, time_tolerance=time_tolerance)

        return users_load + extra_load
